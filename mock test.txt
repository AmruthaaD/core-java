1. Java is a object oriented high level programming language
   javac compile the the source code and covert it to the byte code

2. JDK java development tool kit
   jdk is a collection of JRE and tools 
   JRE is a collection of JCM and libraries
JVM compiles the byte code it is platform independent it does not require original code it need only .class file to give output

3. .java file is written by the programer or developer it in english language it can be understand by the peoples. every time we use .java file it needs compilation
     without compilation we cannot run the .java file
   .class file is generated by the javac it is understand bye the jvm  .class file is in machine language means it is in 0 and 1's format it is underatand by the 
   computer
   .class file does not require compilation it can be execute in any environment once it is generated. once compilation is completed no need of .java file to execute it

4.JDK, JRE, JVM

5.variable is used to store the information
 types of variables
local variables,instance variables
local variables have access only inside scope or the method. it can be accessed with in that method only

instance variables are declared in the class it can be used throughtout the class and can be accessed in any where in that class it can also be accessed from the another class
using the class with the variable name
example:
class Car{
String name;//instance variable
String model;//instance variable
void setName(String name)
{
this.name=name;//here this.name is the local variable
}
}

class CarStarter{
public static void main(String[] args)
{
Car.setName("Creta")
System.out.println("Car name is :"+Car.name);
}
}

6.Java is a object oriented programming language
  once we right write the code it can be run anyware. .java file is compiled jvm can convert the source code into the byte code called .class file, it can be run 
  anywhere it does not require compilation or .java file to run it in any platform

7. this program contains same method name with different parameters
  it will complied successfuly but it returns nothing

8.datatype is the type of data or information we used to store it in the variables.
  primitive datatypes and non primitive datatypes
 primitive datatypes are the build in data types that are used by the programer whenever it is required
example: int, char,long,double,float,String
class Bag{
String brand;
double cost;
}
non primitive datatype is defined by the user 
any name that we are declared is a non primitive datatype
example:
class Laptop{
Model model;

}

9.dot operator is used to access the variables and methods
  example:
  class Person{
  String name;
  int age;
   
  void setName(String name)
{
this.name=name;
}
void setAge(int age)
{
this.age=age;
}
}

class PersonInfo{
public static void main(String[] args)
{
Car.setName("Amrutha");
Car.setAge(23);
System.out.println("Name and age :"+Car.name+","+Car.age);
}
}

10. >object oriented
>portable
>high level programming language
>robust
>platform independence
>secure
>write once run anywhere

11. Arayy is a collection of similar elemets, we use [] to create array of objects
example:
String[] names={"son","john"};
we can acces the array elements using the index
once the size of the array is initialised it cannot be changed
we can reinitialise the array elements using = operator 
index start with 0 and ends with number of elements minus 1
class Details{
String[] names={"son","jhon","ram");
int[] ages={25,56,43};
public static void main(String[] args)
{
System.out.println(names[0]);
System.out.println(names[1]);
System.out.println(names[2]);
System.out.println(ages[0]);
System.out.println(ages[1]);
System.out.println(ages[2]);
}

12. class is a keyword, datatype, type,t ,non primitive 
class is a collection of an object

object is the instance of class

class Cable{
String color;
double length;
}
class  CableInfo{
public static void main(String[] values)
{
Cable cable=new Cable();
System.out.println("Color "+cable.color);
System.out.println("length "+cable.length);
}
}

13. there are 48 keywords in java
keywords are the constants that are builtin in java
int
float 
String
double
char
out
if
else
while
do
instanceOf
example:

  class Person{
  String name;
  int age;
   
  void setName(String name)
{
this.name=name;
}
void setAge(int age)
{
this.age=age;
}
}

class PersonInfo{
public static void main(String[] args)
{
Car.setName("Amrutha");
Car.setAge(23);
System.out.println("Name and age :"+Car.name+","+Car.age);
}
}

14. Constuctor has same name as class name, no return values, it is a non-primitive datatype
    no argument constructor and constuctor with arguments
constuctor has same name but different parameters
Class Bag{
int cost;
String brand;
Bag()
{
Syastem.out.println("no argument const");
}
Bag(int cost,String brand)
{
this.cost=cost;
this.brand=brand;
Syastem.out.println("Constuctor take int,String as argument");
}
}

15. main method is static because we can acces the variable values without creating the object for that variables.
Static methods and non static methods
static can be declared using static keyword
example: static void display()
{
}
non static can be decalred using non static or simply writing method name 
Example: void display()
{
}
static can be variables can be accessed by the static method
non static variables can be accessed by both static and non methods

16 class Example{
    int[] numbers;
    public static void main(Strin[] numbers)
{
System.out.println("enter the array elements:");
numbers=int.input();
System.out.println(numbers.length());
}
}

17. method as access modifiers like public,private,protected
    static keyword to access the variables without creating the obejct 
then it conatin the return type it will returns the value or not
name of the method
parameters that we need pass to that method. Parameters are optional whenever neccessary we will pass the argument
example:
public static void main(String[] value)
or
void display()

method overloading
same method name but different in the parameters that are passed
example:
Class Charger{
int cost;
String brand;
Charger()
{
Syastem.out.println("no argument const");
}
Charger(int cost,String brand)
{
this.cost=cost;
this.brand=brand;
Syastem.out.println("Constuctor take int,String as argument");
}
void displayInfo()
{
System.out.println("cost:"+cost);
System.out.println("brand:"+brand);
}
class ChargerInfo{
public static void main(String[] val)
{
Charger charge=new Charger();
charger.displayInfo();
Charger charge1=new Charger(250,"xiamo");
charger1.displayInfo();